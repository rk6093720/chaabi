import * as types from "./actionTypes";
const initialState = {
    
   typingbigrams:[
        'th',
        'he',
        'in',
        'er',
        'an',
        're',
        'on',
        'at',
        'en',
        'nd',
        'ti',
        'es',
        'or',
        'te',
        'of',
        'ed',
        'is',
        'it',
        'al',
        'ar',
        'st',
        'to',
        'nt',
        'ng',
        'se',
        'ha',
        'as',
        'ou',
        'io',
        'le',
        've',
        'co',
        'me',
        'de',
        'hi',
        'ri',
        'ro',
        'ic',
        'ne',
        'ea',
        'ra',
        'ce',
        'li',
        'ch',
        'll',
        'be',
        'ma',
        'si',
        'om',
        'ur',
        'ca',
        'el',
        'ta',
        'la',
        'ns',
        'di',
        'fo',
        'ho',
        'pe',
        'ec',
        'pr',
        'no',
        'ct',
        'us',
        'ac',
        'ot',
        'il',
        'tr',
        'ly',
        'nc',
        'et',
        'ut',
        'ss',
        'so',
        'rs',
        'un',
        'lo',
        'wa',
        'ge',
        'ie',
        'wh',
        'ee',
        'wi',
        'em',
        'ad',
        'ol',
        'rt',
        'po',
        'we',
        'na',
        'ul',
        'ni',
        'ts',
        'mo',
        'ow',
        'pa',
        'im',
        'mi',
        'ai',
        'sh',
        'ir',
        'su',
        'id',
        'os',
        'iv',
        'ia',
        'am',
        'fi',
        'ci',
        'vi',
        'pl',
        'ig',
        'tu',
        'ev',
        'ld',
        'ry',
        'mp',
        'fe',
        'bl',
        'ab',
        'gh',
        'ty',
        'op',
        'wo',
        'sa',
        'ay',
        'ex',
        'ke',
        'fr',
        'oo',
        'av',
        'ag',
        'if',
        'ap',
        'gr',
        'od',
        'bo',
        'sp',
        'rd',
        'do',
        'uc',
        'bu',
        'ei',
        'ov',
        'by',
        'rm',
        'ep',
        'tt',
        'oc',
        'fa',
        'ef',
        'cu',
        'rn',
        'sc',
        'gi',
        'da',
        'yo',
        'cr',
        'cl',
        'du',
        'ga',
        'qu',
        'ue',
        'ff',
        'ba',
        'ey',
        'ls',
        'va',
        'um',
        'pp',
        'ua',
        'up',
        'lu',
        'go',
        'ht',
        'ru',
        'ug',
        'ds',
        'lt',
        'pi',
        'rc',
        'rr',
        'eg',
        'au',
        'ck',
        'ew',
        'mu',
        'br',
        'bi',
        'pt',
        'ak',
        'pu',
        'ui',
        'rg',
        'ib',
        'tl',
        'ny',
        'ki',
        'rk',
        'ys',
    
   ],
   hour:0,
   min:0,
   sec:0,
   isLoading:false,
   isError:false,
}

const reducer = (state = initialState, action) => {
   const { type, payload } = action;
    
    switch (type) {

    case types.GET_TYPING_REQUEST:
        return { 
               ...state,
               isLoading:true,
               isError:false,
            }
    case types.GET_TYPING_SUCCESS:
        return {
            ...state,
            isLoading:false,
            typing:payload,
            isError:false,
        }
    case types.GET_TYPING_FAILURE:
        return {
            ...state,
            isLoading:false,
            isError:true
        }
    case types.hour:
        return {
            ...state,
            hour:payload
        }
    case types.sec:
        return {
            ...state,
            sec:payload
        }
    case types.min:
        return {
            ...state,
            min:payload,
        }
    default:
        return state
    }
}

export { reducer}